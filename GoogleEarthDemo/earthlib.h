/****************************************************************************
**
** Namespace EARTHLib generated by dumpcpp v5.14.1 using
** D:\Qt\Qt5.14.1\5.14.1\msvc2017_64\bin\dumpcpp.exe googleearth.exe
** from the type library googleearth.exe
**
****************************************************************************/

#ifndef QAX_DUMPCPP_EARTHLIB_H
#define QAX_DUMPCPP_EARTHLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef EARTHLIB_EXPORT
#define EARTHLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace EARTHLib {

    enum __MIDL_IApplicationGE_0001 {
        EnterpriseClientGE      = 0,
        ProGE                   = 1,
        PlusGE                  = 2,
        FreeGE                  = 5,
        UnknownGE               = 255
    };

    enum __MIDL_IKHInterface_0001 {
        GE_EC                   = 0,
        GE_Pro                  = 1,
        GE_Plus                 = 2,
        GE_Free                 = 5,
        GE_Plugin               = 6,
        UNKNOWN                 = 255
    };

    enum __MIDL_ITimeGE_0002 {
        TimeNegativeInfinityGE  = -1,
        TimeFiniteGE            = 0,
        TimePositiveInfinityGE  = 1
    };

    enum __MIDL___MIDL_itf_earthcom_0000_0000_0001 {
        RelativeToGroundAltitudeGE= 1,
        AbsoluteAltitudeGE      = 2
    };

// forward declarations
    enum __MIDL___MIDL_itf_earthcom_0000_0000_0001;
    enum __MIDL_ITimeGE_0002;
    enum __MIDL_IApplicationGE_0001;
    enum __MIDL_IKHInterface_0001;
    class ICameraInfoGE;
    class IViewExtentsGE;
    class IFeatureGE;
    class IPointOnTerrainGE;
    class IFeatureCollectionGE;
    class ITourControllerGE;
    class ISearchControllerGE;
    class IAnimationControllerGE;
    enum __MIDL___MIDL_itf_earthcom_0000_0000_0001;
    class ITimeIntervalGE;
    class ITimeGE;
    enum __MIDL_ITimeGE_0002;
    enum __MIDL_IApplicationGE_0001;
    class IKHViewInfo;
    class IKHViewExtents;
    class IKHFeature;
    enum __MIDL_IKHInterface_0001;

class EARTHLIB_EXPORT IApplicationGE : public QAxObject
{
public:
    explicit IApplicationGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property AnimationController

    property AnimationController

    */
    inline EARTHLib::IAnimationControllerGE* AnimationController() const; //Returns the value of AnimationController

    /*
    Property AutoPilotSpeed

    property AutoPilotSpeed

    */
    inline double AutoPilotSpeed() const; //Returns the value of AutoPilotSpeed
    inline void SetAutoPilotSpeed(double value); //Sets the value of the AutoPilotSpeed property

    /*
    Property ElevationExaggeration

    property ElevationExaggeration

    */
    inline double ElevationExaggeration() const; //Returns the value of ElevationExaggeration
    inline void SetElevationExaggeration(double value); //Sets the value of the ElevationExaggeration property

    /*
    Property SearchController

    property SearchController

    */
    inline EARTHLib::ISearchControllerGE* SearchController() const; //Returns the value of SearchController

    /*
    Property StreamingProgressPercentage

    property StreamingProgressPercentage

    */
    inline int StreamingProgressPercentage() const; //Returns the value of StreamingProgressPercentage

    /*
    Property TourController

    property TourController

    */
    inline EARTHLib::ITourControllerGE* TourController() const; //Returns the value of TourController

    /*
    Property VersionAppType

    property VersionAppTye

    */
    inline EARTHLib::__MIDL_IApplicationGE_0001 VersionAppType() const; //Returns the value of VersionAppType

    /*
    Property VersionBuild

    property VersionBuild

    */
    inline int VersionBuild() const; //Returns the value of VersionBuild

    /*
    Property VersionMajor

    property VersionMajor

    */
    inline int VersionMajor() const; //Returns the value of VersionMajor

    /*
    Property VersionMinor

    property VersionMinor

    */
    inline int VersionMinor() const; //Returns the value of VersionMinor

    /*
    Property ViewExtents

    property ViewExtents

    */
    inline EARTHLib::IViewExtentsGE* ViewExtents() const; //Returns the value of ViewExtents

    /*
    Method GetCamera

    method GetCamera

    */
    inline EARTHLib::ICameraInfoGE* GetCamera(int considerTerrain);

    /*
    Method GetFeatureByHref

    method GetFeatureByHref

    */
    inline EARTHLib::IFeatureGE* GetFeatureByHref(const QString& href);

    /*
    Method GetFeatureByName

    method GetFeatureByName

    */
    inline EARTHLib::IFeatureGE* GetFeatureByName(const QString& Name);

    /*
    Method GetHighlightedFeature

    method GetHighlightedFeature

    */
    inline EARTHLib::IFeatureGE* GetHighlightedFeature();

    /*
    Method GetLayersDatabases

    method GetLayersDatabases

    */
    inline EARTHLib::IFeatureCollectionGE* GetLayersDatabases();

    /*
    Method GetMainHwnd

    method GetMainHwnd

    */
    inline int GetMainHwnd();

    /*
    Method GetMyPlaces

    method GetMyPlaces

    */
    inline EARTHLib::IFeatureGE* GetMyPlaces();

    /*
    Method GetPointOnTerrainFromScreenCoords

    method GetPointOnTerrainFromScreenCoords

    */
    inline EARTHLib::IPointOnTerrainGE* GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y);

    /*
    Method GetRenderHwnd

    method GetRenderHwnd

    */
    inline int GetRenderHwnd();

    /*
    Method GetTemporaryPlaces

    method GetTemporaryPlaces

    */
    inline EARTHLib::IFeatureGE* GetTemporaryPlaces();

    /*
    Method HideDescriptionBalloons

    method HideDescriptionBalloons

    */
    inline void HideDescriptionBalloons();

    /*
    Method IsInitialized

    method IsInitialized

    */
    inline int IsInitialized();

    /*
    Method IsOnline

    method IsOnline

    */
    inline int IsOnline();

    /*
    Method LoadKmlData

    method LoadKmlData

    */
    inline void LoadKmlData(QString& kmlData);

    /*
    Method Login

    method Login

    */
    inline void Login();

    /*
    Method Logout

    method Logout

    */
    inline void Logout();

    /*
    Method OpenKmlFile

    method OpenKmlFile

    */
    inline void OpenKmlFile(const QString& fileName, int suppressMessages);

    /*
    Method SaveScreenShot

    method SaveScreenShot

    */
    inline void SaveScreenShot(const QString& fileName, int quality);

    /*
    Method SetCamera

    method SetCamera

    */
    inline void SetCamera(EARTHLib::ICameraInfoGE* camera, double speed);

    /*
    Method SetCameraParams

    method SetCameraParams

    */
    inline void SetCameraParams(double lat, double lon, double alt, EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 altMode, double Range, double Tilt, double Azimuth, double speed);

    /*
    Method SetFeatureView

    method SetFeatureView

    */
    inline void SetFeatureView(EARTHLib::IFeatureGE* feature, double speed);

    /*
    Method ShowDescriptionBalloon

    method ShowDescriptionBalloon

    */
    inline void ShowDescriptionBalloon(EARTHLib::IFeatureGE* feature);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ICameraInfoGE : public QAxObject
{
public:
    explicit ICameraInfoGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Azimuth

    property Azimuth

    */
    inline double Azimuth() const; //Returns the value of Azimuth
    inline void SetAzimuth(double value); //Sets the value of the Azimuth property

    /*
    Property FocusPointAltitude

    property FocusPointAltitude

    */
    inline double FocusPointAltitude() const; //Returns the value of FocusPointAltitude
    inline void SetFocusPointAltitude(double value); //Sets the value of the FocusPointAltitude property

    /*
    Property FocusPointAltitudeMode

    property AltitudeModeGE

    */
    inline EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 FocusPointAltitudeMode() const; //Returns the value of FocusPointAltitudeMode
    inline void SetFocusPointAltitudeMode(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 value); //Sets the value of the FocusPointAltitudeMode property

    /*
    Property FocusPointLatitude

    property FocusPointLatitude

    */
    inline double FocusPointLatitude() const; //Returns the value of FocusPointLatitude
    inline void SetFocusPointLatitude(double value); //Sets the value of the FocusPointLatitude property

    /*
    Property FocusPointLongitude

    property FocusPointLongitude

    */
    inline double FocusPointLongitude() const; //Returns the value of FocusPointLongitude
    inline void SetFocusPointLongitude(double value); //Sets the value of the FocusPointLongitude property

    /*
    Property Range

    property Range

    */
    inline double Range() const; //Returns the value of Range
    inline void SetRange(double value); //Sets the value of the Range property

    /*
    Property Tilt

    property Tilt

    */
    inline double Tilt() const; //Returns the value of Tilt
    inline void SetTilt(double value); //Sets the value of the Tilt property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IViewExtentsGE : public QAxObject
{
public:
    explicit IViewExtentsGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property East

    property East

    */
    inline double East() const; //Returns the value of East

    /*
    Property North

    property North

    */
    inline double North() const; //Returns the value of North

    /*
    Property South

    property South

    */
    inline double South() const; //Returns the value of South

    /*
    Property West

    property West

    */
    inline double West() const; //Returns the value of West

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IFeatureGE : public QAxObject
{
public:
    explicit IFeatureGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property HasView

    property HasView

    */
    inline int HasView() const; //Returns the value of HasView

    /*
    Property Highlighted

    property Highlighted

    */
    inline int Highlighted() const; //Returns the value of Highlighted

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property TimeInterval

    property TimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* TimeInterval() const; //Returns the value of TimeInterval

    /*
    Property Visibility

    property Visibility

    */
    inline int Visibility() const; //Returns the value of Visibility
    inline void SetVisibility(int value); //Sets the value of the Visibility property

    /*
    Method GetChildren

    method GetChildren

    */
    inline EARTHLib::IFeatureCollectionGE* GetChildren();

    /*
    Method GetParent

    method GetParent

    */
    inline EARTHLib::IFeatureGE* GetParent();

    /*
    Method Highlight

    method Highlight

    */
    inline void Highlight();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IFeatureCollectionGE : public QAxObject
{
public:
    explicit IFeatureCollectionGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    property _NewEnum

    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    property Item

    */
    inline EARTHLib::IFeatureGE* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ITimeIntervalGE : public QAxObject
{
public:
    explicit ITimeIntervalGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property BeginTime

    property BeginTime

    */
    inline EARTHLib::ITimeGE* BeginTime() const; //Returns the value of BeginTime

    /*
    Property EndTime

    property EndTime

    */
    inline EARTHLib::ITimeGE* EndTime() const; //Returns the value of EndTime

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ITimeGE : public QAxObject
{
public:
    explicit ITimeGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Day

    property Day

    */
    inline int Day() const; //Returns the value of Day
    inline void SetDay(int value); //Sets the value of the Day property

    /*
    Property Hour

    property Hour

    */
    inline int Hour() const; //Returns the value of Hour
    inline void SetHour(int value); //Sets the value of the Hour property

    /*
    Property Minute

    property Minute

    */
    inline int Minute() const; //Returns the value of Minute
    inline void SetMinute(int value); //Sets the value of the Minute property

    /*
    Property Month

    property Month

    */
    inline int Month() const; //Returns the value of Month
    inline void SetMonth(int value); //Sets the value of the Month property

    /*
    Property Second

    property Second

    */
    inline int Second() const; //Returns the value of Second
    inline void SetSecond(int value); //Sets the value of the Second property

    /*
    Property TimeZone

    property TimeZone

    */
    inline double TimeZone() const; //Returns the value of TimeZone
    inline void SetTimeZone(double value); //Sets the value of the TimeZone property

    /*
    Property Type

    property Type

    */
    inline EARTHLib::__MIDL_ITimeGE_0002 Type() const; //Returns the value of Type
    inline void SetType(EARTHLib::__MIDL_ITimeGE_0002 value); //Sets the value of the Type property

    /*
    Property Year

    property Year

    */
    inline int Year() const; //Returns the value of Year
    inline void SetYear(int value); //Sets the value of the Year property

    /*
    Method Clone

    method Clone

    */
    inline EARTHLib::ITimeGE* Clone();

    /*
    Method ConvertToZone

    method ConvertToZone

    */
    inline EARTHLib::ITimeGE* ConvertToZone(double TimeZone);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IPointOnTerrainGE : public QAxObject
{
public:
    explicit IPointOnTerrainGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Altitude

    property Altitude

    */
    inline double Altitude() const; //Returns the value of Altitude

    /*
    Property Latitude

    property Latitude

    */
    inline double Latitude() const; //Returns the value of Latitude

    /*
    Property Longitude

    property Longitude

    */
    inline double Longitude() const; //Returns the value of Longitude

    /*
    Property ProjectedOntoGlobe

    ProjectedOntoGlobe

    */
    inline int ProjectedOntoGlobe() const; //Returns the value of ProjectedOntoGlobe

    /*
    Property ZeroElevationExaggeration

    ZeroElevationExaggeration

    */
    inline int ZeroElevationExaggeration() const; //Returns the value of ZeroElevationExaggeration

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ITourControllerGE : public QAxObject
{
public:
    explicit ITourControllerGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Cycles

    property Cycles

    */
    inline int Cycles() const; //Returns the value of Cycles
    inline void SetCycles(int value); //Sets the value of the Cycles property

    /*
    Property PauseDelay

    property PauseDelay

    */
    inline double PauseDelay() const; //Returns the value of PauseDelay
    inline void SetPauseDelay(double value); //Sets the value of the PauseDelay property

    /*
    Property speed

    property Speed

    */
    inline double speed() const; //Returns the value of speed
    inline void setSpeed(double value); //Sets the value of the speed property

    /*
    Method PlayOrPause

    method PlayOrPause

    */
    inline void PlayOrPause();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ISearchControllerGE : public QAxObject
{
public:
    explicit ISearchControllerGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Method ClearResults

    method ClearResults

    */
    inline void ClearResults();

    /*
    Method GetResults

    method GetResults

    */
    inline EARTHLib::IFeatureCollectionGE* GetResults();

    /*
    Method IsSearchInProgress

    method IsSearchInProgress

    */
    inline int IsSearchInProgress();

    /*
    Method Search

    method Search

    */
    inline void Search(const QString& searchString);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IAnimationControllerGE : public QAxObject
{
public:
    explicit IAnimationControllerGE(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property CurrentTimeInterval

    property CurrentTimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* CurrentTimeInterval() const; //Returns the value of CurrentTimeInterval
    inline void SetCurrentTimeInterval(EARTHLib::ITimeIntervalGE* value); //Sets the value of the CurrentTimeInterval property

    /*
    Property SliderTimeInterval

    property SliderTimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* SliderTimeInterval() const; //Returns the value of SliderTimeInterval

    /*
    Method Pause

    method Pause

    */
    inline void Pause();

    /*
    Method Play

    method Play

    */
    inline void Play();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IKHInterface : public QAxObject
{
public:
    explicit IKHInterface(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property AutoPilotSpeed

    property autopilotSpeed

    */
    inline double AutoPilotSpeed() const; //Returns the value of AutoPilotSpeed
    inline void SetAutoPilotSpeed(double value); //Sets the value of the AutoPilotSpeed property

    /*
    Property StreamingProgressPercentage

    property streamingProgressPercentage

    */
    inline int StreamingProgressPercentage() const; //Returns the value of StreamingProgressPercentage

    /*
    Property currentViewExtents

    property currentViewExtents

    */
    inline EARTHLib::IKHViewExtents* currentViewExtents() const; //Returns the value of currentViewExtents

    /*
    Method GetFeatureByName

    method getFeatureByName

    */
    inline EARTHLib::IKHFeature* GetFeatureByName(const QString& Name);

    /*
    Method GetPointOnTerrainFromScreenCoords

    method getPointOnTerrainFromScreenCoords

    */
    inline QVariantList GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y);

    /*
    Method LoadKml

    method LoadKml

    */
    inline void LoadKml(QString& kmlData);

    /*
    Method OpenFile

    method OpenFile

    */
    inline void OpenFile(const QString& fileName);

    /*
    Method QuitApplication

    method QuitApplication

    */
    inline void QuitApplication();

    /*
    Method SaveScreenShot

    method SaveScreenShot

    */
    inline void SaveScreenShot(const QString& fileName, int quality);

    /*
    Method SetFeatureView

    method setFeatureView

    */
    inline void SetFeatureView(EARTHLib::IKHFeature* feature, double speed);

    /*
    Method SetRenderWindowSize

    method SetRenderWindowSize

    */
    inline void SetRenderWindowSize(int width, int height);

    /*
    Method currentView

    property currentView

    */
    inline EARTHLib::IKHViewInfo* currentView(int terrain);

    /*
    Method getCurrentVersion

    method getCurrentVersion

    */
    inline void getCurrentVersion(int& major, int& minor, int& build, __MIDL_IKHInterface_0001& appType);

    /*
    Method isClientInitialized

    method isClientInitialized

    */
    inline void isClientInitialized(int& IsInitialized);

    /*
    Method setView

    method setView

    */
    inline void setView(EARTHLib::IKHViewInfo* view, int terrain, double speed);

    /*
    Method setViewParams

    method setViewParams

    */
    inline void setViewParams(double lat, double lon, double Range, double Tilt, double Azimuth, int terrain, double speed);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IKHViewInfo : public QAxObject
{
public:
    explicit IKHViewInfo(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property Azimuth

    property azimuth

    */
    inline double Azimuth() const; //Returns the value of Azimuth
    inline void SetAzimuth(double value); //Sets the value of the Azimuth property

    /*
    Property Latitude

    property latitude

    */
    inline double Latitude() const; //Returns the value of Latitude
    inline void SetLatitude(double value); //Sets the value of the Latitude property

    /*
    Property Longitude

    property longitude

    */
    inline double Longitude() const; //Returns the value of Longitude
    inline void SetLongitude(double value); //Sets the value of the Longitude property

    /*
    Property Range

    property range

    */
    inline double Range() const; //Returns the value of Range
    inline void SetRange(double value); //Sets the value of the Range property

    /*
    Property Tilt

    property tilt

    */
    inline double Tilt() const; //Returns the value of Tilt
    inline void SetTilt(double value); //Sets the value of the Tilt property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IKHViewExtents : public QAxObject
{
public:
    explicit IKHViewExtents(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property East

    property east

    */
    inline double East() const; //Returns the value of East

    /*
    Property North

    property north

    */
    inline double North() const; //Returns the value of North

    /*
    Property South

    property south

    */
    inline double South() const; //Returns the value of South

    /*
    Property West

    property west

    */
    inline double West() const; //Returns the value of West

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT IKHFeature : public QAxObject
{
public:
    explicit IKHFeature(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Property HasView

    property hasView

    */
    inline int HasView() const; //Returns the value of HasView

    /*
    Property Visibility

    property visibility

    */
    inline int Visibility() const; //Returns the value of Visibility
    inline void SetVisibility(int value); //Sets the value of the Visibility property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// Actual coclasses
class EARTHLIB_EXPORT ApplicationGE : public QAxObject
{
public:
    explicit ApplicationGE(QObject *parent = nullptr);
    ApplicationGE(IApplicationGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AnimationController

    property AnimationController

    */
    inline EARTHLib::IAnimationControllerGE* AnimationController() const; //Returns the value of AnimationController

    /*
    Property AutoPilotSpeed

    property AutoPilotSpeed

    */
    inline double AutoPilotSpeed() const; //Returns the value of AutoPilotSpeed
    inline void SetAutoPilotSpeed(double value); //Sets the value of the AutoPilotSpeed property

    /*
    Property ElevationExaggeration

    property ElevationExaggeration

    */
    inline double ElevationExaggeration() const; //Returns the value of ElevationExaggeration
    inline void SetElevationExaggeration(double value); //Sets the value of the ElevationExaggeration property

    /*
    Property SearchController

    property SearchController

    */
    inline EARTHLib::ISearchControllerGE* SearchController() const; //Returns the value of SearchController

    /*
    Property StreamingProgressPercentage

    property StreamingProgressPercentage

    */
    inline int StreamingProgressPercentage() const; //Returns the value of StreamingProgressPercentage

    /*
    Property TourController

    property TourController

    */
    inline EARTHLib::ITourControllerGE* TourController() const; //Returns the value of TourController

    /*
    Property VersionAppType

    property VersionAppTye

    */
    inline EARTHLib::__MIDL_IApplicationGE_0001 VersionAppType() const; //Returns the value of VersionAppType

    /*
    Property VersionBuild

    property VersionBuild

    */
    inline int VersionBuild() const; //Returns the value of VersionBuild

    /*
    Property VersionMajor

    property VersionMajor

    */
    inline int VersionMajor() const; //Returns the value of VersionMajor

    /*
    Property VersionMinor

    property VersionMinor

    */
    inline int VersionMinor() const; //Returns the value of VersionMinor

    /*
    Property ViewExtents

    property ViewExtents

    */
    inline EARTHLib::IViewExtentsGE* ViewExtents() const; //Returns the value of ViewExtents

    /*
    Method GetCamera

    method GetCamera

    */
    inline EARTHLib::ICameraInfoGE* GetCamera(int considerTerrain);

    /*
    Method GetFeatureByHref

    method GetFeatureByHref

    */
    inline EARTHLib::IFeatureGE* GetFeatureByHref(const QString& href);

    /*
    Method GetFeatureByName

    method GetFeatureByName

    */
    inline EARTHLib::IFeatureGE* GetFeatureByName(const QString& Name);

    /*
    Method GetHighlightedFeature

    method GetHighlightedFeature

    */
    inline EARTHLib::IFeatureGE* GetHighlightedFeature();

    /*
    Method GetLayersDatabases

    method GetLayersDatabases

    */
    inline EARTHLib::IFeatureCollectionGE* GetLayersDatabases();

    /*
    Method GetMainHwnd

    method GetMainHwnd

    */
    inline int GetMainHwnd();

    /*
    Method GetMyPlaces

    method GetMyPlaces

    */
    inline EARTHLib::IFeatureGE* GetMyPlaces();

    /*
    Method GetPointOnTerrainFromScreenCoords

    method GetPointOnTerrainFromScreenCoords

    */
    inline EARTHLib::IPointOnTerrainGE* GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y);

    /*
    Method GetRenderHwnd

    method GetRenderHwnd

    */
    inline int GetRenderHwnd();

    /*
    Method GetTemporaryPlaces

    method GetTemporaryPlaces

    */
    inline EARTHLib::IFeatureGE* GetTemporaryPlaces();

    /*
    Method HideDescriptionBalloons

    method HideDescriptionBalloons

    */
    inline void HideDescriptionBalloons();

    /*
    Method IsInitialized

    method IsInitialized

    */
    inline int IsInitialized();

    /*
    Method IsOnline

    method IsOnline

    */
    inline int IsOnline();

    /*
    Method LoadKmlData

    method LoadKmlData

    */
    inline void LoadKmlData(QString& kmlData);

    /*
    Method Login

    method Login

    */
    inline void Login();

    /*
    Method Logout

    method Logout

    */
    inline void Logout();

    /*
    Method OpenKmlFile

    method OpenKmlFile

    */
    inline void OpenKmlFile(const QString& fileName, int suppressMessages);

    /*
    Method SaveScreenShot

    method SaveScreenShot

    */
    inline void SaveScreenShot(const QString& fileName, int quality);

    /*
    Method SetCamera

    method SetCamera

    */
    inline void SetCamera(EARTHLib::ICameraInfoGE* camera, double speed);

    /*
    Method SetCameraParams

    method SetCameraParams

    */
    inline void SetCameraParams(double lat, double lon, double alt, EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 altMode, double Range, double Tilt, double Azimuth, double speed);

    /*
    Method SetFeatureView

    method SetFeatureView

    */
    inline void SetFeatureView(EARTHLib::IFeatureGE* feature, double speed);

    /*
    Method ShowDescriptionBalloon

    method ShowDescriptionBalloon

    */
    inline void ShowDescriptionBalloon(EARTHLib::IFeatureGE* feature);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT TimeGE : public QAxObject
{
public:
    explicit TimeGE(QObject *parent = nullptr);
    TimeGE(ITimeGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Day

    property Day

    */
    inline int Day() const; //Returns the value of Day
    inline void SetDay(int value); //Sets the value of the Day property

    /*
    Property Hour

    property Hour

    */
    inline int Hour() const; //Returns the value of Hour
    inline void SetHour(int value); //Sets the value of the Hour property

    /*
    Property Minute

    property Minute

    */
    inline int Minute() const; //Returns the value of Minute
    inline void SetMinute(int value); //Sets the value of the Minute property

    /*
    Property Month

    property Month

    */
    inline int Month() const; //Returns the value of Month
    inline void SetMonth(int value); //Sets the value of the Month property

    /*
    Property Second

    property Second

    */
    inline int Second() const; //Returns the value of Second
    inline void SetSecond(int value); //Sets the value of the Second property

    /*
    Property TimeZone

    property TimeZone

    */
    inline double TimeZone() const; //Returns the value of TimeZone
    inline void SetTimeZone(double value); //Sets the value of the TimeZone property

    /*
    Property Type

    property Type

    */
    inline EARTHLib::__MIDL_ITimeGE_0002 Type() const; //Returns the value of Type
    inline void SetType(EARTHLib::__MIDL_ITimeGE_0002 value); //Sets the value of the Type property

    /*
    Property Year

    property Year

    */
    inline int Year() const; //Returns the value of Year
    inline void SetYear(int value); //Sets the value of the Year property

    /*
    Method Clone

    method Clone

    */
    inline EARTHLib::ITimeGE* Clone();

    /*
    Method ConvertToZone

    method ConvertToZone

    */
    inline EARTHLib::ITimeGE* ConvertToZone(double TimeZone);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT TimeIntervalGE : public QAxObject
{
public:
    explicit TimeIntervalGE(QObject *parent = nullptr);
    TimeIntervalGE(ITimeIntervalGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BeginTime

    property BeginTime

    */
    inline EARTHLib::ITimeGE* BeginTime() const; //Returns the value of BeginTime

    /*
    Property EndTime

    property EndTime

    */
    inline EARTHLib::ITimeGE* EndTime() const; //Returns the value of EndTime

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT CameraInfoGE : public QAxObject
{
public:
    explicit CameraInfoGE(QObject *parent = nullptr);
    CameraInfoGE(ICameraInfoGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Azimuth

    property Azimuth

    */
    inline double Azimuth() const; //Returns the value of Azimuth
    inline void SetAzimuth(double value); //Sets the value of the Azimuth property

    /*
    Property FocusPointAltitude

    property FocusPointAltitude

    */
    inline double FocusPointAltitude() const; //Returns the value of FocusPointAltitude
    inline void SetFocusPointAltitude(double value); //Sets the value of the FocusPointAltitude property

    /*
    Property FocusPointAltitudeMode

    property AltitudeModeGE

    */
    inline EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 FocusPointAltitudeMode() const; //Returns the value of FocusPointAltitudeMode
    inline void SetFocusPointAltitudeMode(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 value); //Sets the value of the FocusPointAltitudeMode property

    /*
    Property FocusPointLatitude

    property FocusPointLatitude

    */
    inline double FocusPointLatitude() const; //Returns the value of FocusPointLatitude
    inline void SetFocusPointLatitude(double value); //Sets the value of the FocusPointLatitude property

    /*
    Property FocusPointLongitude

    property FocusPointLongitude

    */
    inline double FocusPointLongitude() const; //Returns the value of FocusPointLongitude
    inline void SetFocusPointLongitude(double value); //Sets the value of the FocusPointLongitude property

    /*
    Property Range

    property Range

    */
    inline double Range() const; //Returns the value of Range
    inline void SetRange(double value); //Sets the value of the Range property

    /*
    Property Tilt

    property Tilt

    */
    inline double Tilt() const; //Returns the value of Tilt
    inline void SetTilt(double value); //Sets the value of the Tilt property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT ViewExtentsGE : public QAxObject
{
public:
    explicit ViewExtentsGE(QObject *parent = nullptr);
    ViewExtentsGE(IViewExtentsGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property East

    property East

    */
    inline double East() const; //Returns the value of East

    /*
    Property North

    property North

    */
    inline double North() const; //Returns the value of North

    /*
    Property South

    property South

    */
    inline double South() const; //Returns the value of South

    /*
    Property West

    property West

    */
    inline double West() const; //Returns the value of West

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT TourControllerGE : public QAxObject
{
public:
    explicit TourControllerGE(QObject *parent = nullptr);
    TourControllerGE(ITourControllerGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Cycles

    property Cycles

    */
    inline int Cycles() const; //Returns the value of Cycles
    inline void SetCycles(int value); //Sets the value of the Cycles property

    /*
    Property PauseDelay

    property PauseDelay

    */
    inline double PauseDelay() const; //Returns the value of PauseDelay
    inline void SetPauseDelay(double value); //Sets the value of the PauseDelay property

    /*
    Property speed

    property Speed

    */
    inline double speed() const; //Returns the value of speed
    inline void setSpeed(double value); //Sets the value of the speed property

    /*
    Method PlayOrPause

    method PlayOrPause

    */
    inline void PlayOrPause();

    /*
    Method Stop

    method Stop

    */
    inline void Stop();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT SearchControllerGE : public QAxObject
{
public:
    explicit SearchControllerGE(QObject *parent = nullptr);
    SearchControllerGE(ISearchControllerGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method ClearResults

    method ClearResults

    */
    inline void ClearResults();

    /*
    Method GetResults

    method GetResults

    */
    inline EARTHLib::IFeatureCollectionGE* GetResults();

    /*
    Method IsSearchInProgress

    method IsSearchInProgress

    */
    inline int IsSearchInProgress();

    /*
    Method Search

    method Search

    */
    inline void Search(const QString& searchString);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT AnimationControllerGE : public QAxObject
{
public:
    explicit AnimationControllerGE(QObject *parent = nullptr);
    AnimationControllerGE(IAnimationControllerGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CurrentTimeInterval

    property CurrentTimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* CurrentTimeInterval() const; //Returns the value of CurrentTimeInterval
    inline void SetCurrentTimeInterval(EARTHLib::ITimeIntervalGE* value); //Sets the value of the CurrentTimeInterval property

    /*
    Property SliderTimeInterval

    property SliderTimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* SliderTimeInterval() const; //Returns the value of SliderTimeInterval

    /*
    Method Pause

    method Pause

    */
    inline void Pause();

    /*
    Method Play

    method Play

    */
    inline void Play();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT FeatureGE : public QAxObject
{
public:
    explicit FeatureGE(QObject *parent = nullptr);
    FeatureGE(IFeatureGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property HasView

    property HasView

    */
    inline int HasView() const; //Returns the value of HasView

    /*
    Property Highlighted

    property Highlighted

    */
    inline int Highlighted() const; //Returns the value of Highlighted

    /*
    Property Name

    property Name

    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property TimeInterval

    property TimeInterval

    */
    inline EARTHLib::ITimeIntervalGE* TimeInterval() const; //Returns the value of TimeInterval

    /*
    Property Visibility

    property Visibility

    */
    inline int Visibility() const; //Returns the value of Visibility
    inline void SetVisibility(int value); //Sets the value of the Visibility property

    /*
    Method GetChildren

    method GetChildren

    */
    inline EARTHLib::IFeatureCollectionGE* GetChildren();

    /*
    Method GetParent

    method GetParent

    */
    inline EARTHLib::IFeatureGE* GetParent();

    /*
    Method Highlight

    method Highlight

    */
    inline void Highlight();

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT FeatureCollectionGE : public QAxObject
{
public:
    explicit FeatureCollectionGE(QObject *parent = nullptr);
    FeatureCollectionGE(IFeatureCollectionGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Property _NewEnum

    property _NewEnum

    */
    inline IUnknown* _NewEnum() const; //Returns the value of _NewEnum

    /*
    Method Item

    property Item

    */
    inline EARTHLib::IFeatureGE* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT PointOnTerrainGE : public QAxObject
{
public:
    explicit PointOnTerrainGE(QObject *parent = nullptr);
    PointOnTerrainGE(IPointOnTerrainGE *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Altitude

    property Altitude

    */
    inline double Altitude() const; //Returns the value of Altitude

    /*
    Property Latitude

    property Latitude

    */
    inline double Latitude() const; //Returns the value of Latitude

    /*
    Property Longitude

    property Longitude

    */
    inline double Longitude() const; //Returns the value of Longitude

    /*
    Property ProjectedOntoGlobe

    ProjectedOntoGlobe

    */
    inline int ProjectedOntoGlobe() const; //Returns the value of ProjectedOntoGlobe

    /*
    Property ZeroElevationExaggeration

    ZeroElevationExaggeration

    */
    inline int ZeroElevationExaggeration() const; //Returns the value of ZeroElevationExaggeration

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT KHInterface : public QAxObject
{
public:
    explicit KHInterface(QObject *parent = nullptr);
    KHInterface(IKHInterface *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AutoPilotSpeed

    property autopilotSpeed

    */
    inline double AutoPilotSpeed() const; //Returns the value of AutoPilotSpeed
    inline void SetAutoPilotSpeed(double value); //Sets the value of the AutoPilotSpeed property

    /*
    Property StreamingProgressPercentage

    property streamingProgressPercentage

    */
    inline int StreamingProgressPercentage() const; //Returns the value of StreamingProgressPercentage

    /*
    Property currentViewExtents

    property currentViewExtents

    */
    inline EARTHLib::IKHViewExtents* currentViewExtents() const; //Returns the value of currentViewExtents

    /*
    Method GetFeatureByName

    method getFeatureByName

    */
    inline EARTHLib::IKHFeature* GetFeatureByName(const QString& Name);

    /*
    Method GetPointOnTerrainFromScreenCoords

    method getPointOnTerrainFromScreenCoords

    */
    inline QVariantList GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y);

    /*
    Method LoadKml

    method LoadKml

    */
    inline void LoadKml(QString& kmlData);

    /*
    Method OpenFile

    method OpenFile

    */
    inline void OpenFile(const QString& fileName);

    /*
    Method QuitApplication

    method QuitApplication

    */
    inline void QuitApplication();

    /*
    Method SaveScreenShot

    method SaveScreenShot

    */
    inline void SaveScreenShot(const QString& fileName, int quality);

    /*
    Method SetFeatureView

    method setFeatureView

    */
    inline void SetFeatureView(EARTHLib::IKHFeature* feature, double speed);

    /*
    Method SetRenderWindowSize

    method SetRenderWindowSize

    */
    inline void SetRenderWindowSize(int width, int height);

    /*
    Method currentView

    property currentView

    */
    inline EARTHLib::IKHViewInfo* currentView(int terrain);

    /*
    Method getCurrentVersion

    method getCurrentVersion

    */
    inline void getCurrentVersion(int& major, int& minor, int& build, __MIDL_IKHInterface_0001& appType);

    /*
    Method isClientInitialized

    method isClientInitialized

    */
    inline void isClientInitialized(int& IsInitialized);

    /*
    Method setView

    method setView

    */
    inline void setView(EARTHLib::IKHViewInfo* view, int terrain, double speed);

    /*
    Method setViewParams

    method setViewParams

    */
    inline void setViewParams(double lat, double lon, double Range, double Tilt, double Azimuth, int terrain, double speed);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT KHViewInfo : public QAxObject
{
public:
    explicit KHViewInfo(QObject *parent = nullptr);
    KHViewInfo(IKHViewInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Azimuth

    property azimuth

    */
    inline double Azimuth() const; //Returns the value of Azimuth
    inline void SetAzimuth(double value); //Sets the value of the Azimuth property

    /*
    Property Latitude

    property latitude

    */
    inline double Latitude() const; //Returns the value of Latitude
    inline void SetLatitude(double value); //Sets the value of the Latitude property

    /*
    Property Longitude

    property longitude

    */
    inline double Longitude() const; //Returns the value of Longitude
    inline void SetLongitude(double value); //Sets the value of the Longitude property

    /*
    Property Range

    property range

    */
    inline double Range() const; //Returns the value of Range
    inline void SetRange(double value); //Sets the value of the Range property

    /*
    Property Tilt

    property tilt

    */
    inline double Tilt() const; //Returns the value of Tilt
    inline void SetTilt(double value); //Sets the value of the Tilt property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT KHViewExtents : public QAxObject
{
public:
    explicit KHViewExtents(QObject *parent = nullptr);
    KHViewExtents(IKHViewExtents *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property East

    property east

    */
    inline double East() const; //Returns the value of East

    /*
    Property North

    property north

    */
    inline double North() const; //Returns the value of North

    /*
    Property South

    property south

    */
    inline double South() const; //Returns the value of South

    /*
    Property West

    property west

    */
    inline double West() const; //Returns the value of West

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

class EARTHLIB_EXPORT KHFeature : public QAxObject
{
public:
    explicit KHFeature(QObject *parent = nullptr);
    KHFeature(IKHFeature *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property HasView

    property hasView

    */
    inline int HasView() const; //Returns the value of HasView

    /*
    Property Visibility

    property visibility

    */
    inline int Visibility() const; //Returns the value of Visibility
    inline void SetVisibility(int value); //Sets the value of the Visibility property

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// member function implementation
#ifndef QAX_DUMPCPP_EARTHLIB_NOINLINES
inline EARTHLib::IAnimationControllerGE* ApplicationGE::AnimationController() const
{
    EARTHLib::IAnimationControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IAnimationControllerGE*>("IAnimationControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IAnimationControllerGE>("IAnimationControllerGE", qax_pointer);
    QVariant qax_result = property("AnimationController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IAnimationControllerGE**)qax_result.constData();
}

inline double ApplicationGE::AutoPilotSpeed() const
{
    QVariant qax_result = property("AutoPilotSpeed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ApplicationGE::SetAutoPilotSpeed(double value){ setProperty("AutoPilotSpeed", QVariant(value)); }

inline double ApplicationGE::ElevationExaggeration() const
{
    QVariant qax_result = property("ElevationExaggeration");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ApplicationGE::SetElevationExaggeration(double value){ setProperty("ElevationExaggeration", QVariant(value)); }

inline EARTHLib::ISearchControllerGE* ApplicationGE::SearchController() const
{
    EARTHLib::ISearchControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ISearchControllerGE*>("ISearchControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ISearchControllerGE>("ISearchControllerGE", qax_pointer);
    QVariant qax_result = property("SearchController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ISearchControllerGE**)qax_result.constData();
}

inline int ApplicationGE::StreamingProgressPercentage() const
{
    QVariant qax_result = property("StreamingProgressPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::ITourControllerGE* ApplicationGE::TourController() const
{
    EARTHLib::ITourControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITourControllerGE*>("ITourControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITourControllerGE>("ITourControllerGE", qax_pointer);
    QVariant qax_result = property("TourController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITourControllerGE**)qax_result.constData();
}

inline EARTHLib::__MIDL_IApplicationGE_0001 ApplicationGE::VersionAppType() const
{
    QVariant qax_result = property("VersionAppType");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL_IApplicationGE_0001*)qax_result.constData();
}

inline int ApplicationGE::VersionBuild() const
{
    QVariant qax_result = property("VersionBuild");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ApplicationGE::VersionMajor() const
{
    QVariant qax_result = property("VersionMajor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ApplicationGE::VersionMinor() const
{
    QVariant qax_result = property("VersionMinor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::IViewExtentsGE* ApplicationGE::ViewExtents() const
{
    EARTHLib::IViewExtentsGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IViewExtentsGE*>("IViewExtentsGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IViewExtentsGE>("IViewExtentsGE", qax_pointer);
    QVariant qax_result = property("ViewExtents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IViewExtentsGE**)qax_result.constData();
}

inline EARTHLib::ICameraInfoGE* ApplicationGE::GetCamera(int considerTerrain)
{
    EARTHLib::ICameraInfoGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ICameraInfoGE*>("ICameraInfoGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ICameraInfoGE>("ICameraInfoGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&considerTerrain};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* ApplicationGE::GetFeatureByHref(const QString& href)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&href};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* ApplicationGE::GetFeatureByName(const QString& Name)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* ApplicationGE::GetHighlightedFeature()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline EARTHLib::IFeatureCollectionGE* ApplicationGE::GetLayersDatabases()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int ApplicationGE::GetMainHwnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* ApplicationGE::GetMyPlaces()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline EARTHLib::IPointOnTerrainGE* ApplicationGE::GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y)
{
    EARTHLib::IPointOnTerrainGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IPointOnTerrainGE*>("IPointOnTerrainGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IPointOnTerrainGE>("IPointOnTerrainGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&screen_x, (void*)&screen_y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int ApplicationGE::GetRenderHwnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* ApplicationGE::GetTemporaryPlaces()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void ApplicationGE::HideDescriptionBalloons()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline int ApplicationGE::IsInitialized()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int ApplicationGE::IsOnline()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void ApplicationGE::LoadKmlData(QString& kmlData)
{
    void *_a[] = {0, (void*)&kmlData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ApplicationGE::Login()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void ApplicationGE::Logout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void ApplicationGE::OpenKmlFile(const QString& fileName, int suppressMessages)
{
    void *_a[] = {0, (void*)&fileName, (void*)&suppressMessages};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void ApplicationGE::SaveScreenShot(const QString& fileName, int quality)
{
    void *_a[] = {0, (void*)&fileName, (void*)&quality};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void ApplicationGE::SetCamera(EARTHLib::ICameraInfoGE* camera, double speed)
{
    void *_a[] = {0, (void*)&camera, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void ApplicationGE::SetCameraParams(double lat, double lon, double alt, EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 altMode, double Range, double Tilt, double Azimuth, double speed)
{
    void *_a[] = {0, (void*)&lat, (void*)&lon, (void*)&alt, (void*)&altMode, (void*)&Range, (void*)&Tilt, (void*)&Azimuth, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void ApplicationGE::SetFeatureView(EARTHLib::IFeatureGE* feature, double speed)
{
    void *_a[] = {0, (void*)&feature, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void ApplicationGE::ShowDescriptionBalloon(EARTHLib::IFeatureGE* feature)
{
    void *_a[] = {0, (void*)&feature};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}


inline EARTHLib::IAnimationControllerGE* IApplicationGE::AnimationController() const
{
    EARTHLib::IAnimationControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IAnimationControllerGE*>("IAnimationControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IAnimationControllerGE>("IAnimationControllerGE", qax_pointer);
    QVariant qax_result = property("AnimationController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IAnimationControllerGE**)qax_result.constData();
}

inline double IApplicationGE::AutoPilotSpeed() const
{
    QVariant qax_result = property("AutoPilotSpeed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IApplicationGE::SetAutoPilotSpeed(double value){ setProperty("AutoPilotSpeed", QVariant(value)); }

inline double IApplicationGE::ElevationExaggeration() const
{
    QVariant qax_result = property("ElevationExaggeration");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IApplicationGE::SetElevationExaggeration(double value){ setProperty("ElevationExaggeration", QVariant(value)); }

inline EARTHLib::ISearchControllerGE* IApplicationGE::SearchController() const
{
    EARTHLib::ISearchControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ISearchControllerGE*>("ISearchControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ISearchControllerGE>("ISearchControllerGE", qax_pointer);
    QVariant qax_result = property("SearchController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ISearchControllerGE**)qax_result.constData();
}

inline int IApplicationGE::StreamingProgressPercentage() const
{
    QVariant qax_result = property("StreamingProgressPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::ITourControllerGE* IApplicationGE::TourController() const
{
    EARTHLib::ITourControllerGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITourControllerGE*>("ITourControllerGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITourControllerGE>("ITourControllerGE", qax_pointer);
    QVariant qax_result = property("TourController");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITourControllerGE**)qax_result.constData();
}

inline EARTHLib::__MIDL_IApplicationGE_0001 IApplicationGE::VersionAppType() const
{
    QVariant qax_result = property("VersionAppType");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL_IApplicationGE_0001*)qax_result.constData();
}

inline int IApplicationGE::VersionBuild() const
{
    QVariant qax_result = property("VersionBuild");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IApplicationGE::VersionMajor() const
{
    QVariant qax_result = property("VersionMajor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IApplicationGE::VersionMinor() const
{
    QVariant qax_result = property("VersionMinor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::IViewExtentsGE* IApplicationGE::ViewExtents() const
{
    EARTHLib::IViewExtentsGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IViewExtentsGE*>("IViewExtentsGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IViewExtentsGE>("IViewExtentsGE", qax_pointer);
    QVariant qax_result = property("ViewExtents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IViewExtentsGE**)qax_result.constData();
}

inline EARTHLib::ICameraInfoGE* IApplicationGE::GetCamera(int considerTerrain)
{
    EARTHLib::ICameraInfoGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ICameraInfoGE*>("ICameraInfoGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ICameraInfoGE>("ICameraInfoGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&considerTerrain};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IApplicationGE::GetFeatureByHref(const QString& href)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&href};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IApplicationGE::GetFeatureByName(const QString& Name)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IApplicationGE::GetHighlightedFeature()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline EARTHLib::IFeatureCollectionGE* IApplicationGE::GetLayersDatabases()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IApplicationGE::GetMainHwnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IApplicationGE::GetMyPlaces()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline EARTHLib::IPointOnTerrainGE* IApplicationGE::GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y)
{
    EARTHLib::IPointOnTerrainGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IPointOnTerrainGE*>("IPointOnTerrainGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IPointOnTerrainGE>("IPointOnTerrainGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&screen_x, (void*)&screen_y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline int IApplicationGE::GetRenderHwnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IApplicationGE::GetTemporaryPlaces()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IApplicationGE::HideDescriptionBalloons()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline int IApplicationGE::IsInitialized()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int IApplicationGE::IsOnline()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void IApplicationGE::LoadKmlData(QString& kmlData)
{
    void *_a[] = {0, (void*)&kmlData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IApplicationGE::Login()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IApplicationGE::Logout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IApplicationGE::OpenKmlFile(const QString& fileName, int suppressMessages)
{
    void *_a[] = {0, (void*)&fileName, (void*)&suppressMessages};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IApplicationGE::SaveScreenShot(const QString& fileName, int quality)
{
    void *_a[] = {0, (void*)&fileName, (void*)&quality};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IApplicationGE::SetCamera(EARTHLib::ICameraInfoGE* camera, double speed)
{
    void *_a[] = {0, (void*)&camera, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IApplicationGE::SetCameraParams(double lat, double lon, double alt, EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 altMode, double Range, double Tilt, double Azimuth, double speed)
{
    void *_a[] = {0, (void*)&lat, (void*)&lon, (void*)&alt, (void*)&altMode, (void*)&Range, (void*)&Tilt, (void*)&Azimuth, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IApplicationGE::SetFeatureView(EARTHLib::IFeatureGE* feature, double speed)
{
    void *_a[] = {0, (void*)&feature, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IApplicationGE::ShowDescriptionBalloon(EARTHLib::IFeatureGE* feature)
{
    void *_a[] = {0, (void*)&feature};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}


inline double ICameraInfoGE::Azimuth() const
{
    QVariant qax_result = property("Azimuth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetAzimuth(double value){ setProperty("Azimuth", QVariant(value)); }

inline double ICameraInfoGE::FocusPointAltitude() const
{
    QVariant qax_result = property("FocusPointAltitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetFocusPointAltitude(double value){ setProperty("FocusPointAltitude", QVariant(value)); }

inline EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 ICameraInfoGE::FocusPointAltitudeMode() const
{
    QVariant qax_result = property("FocusPointAltitudeMode");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001*)qax_result.constData();
}
inline void ICameraInfoGE::SetFocusPointAltitudeMode(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 value){ setProperty("FocusPointAltitudeMode", QVariant(value)); }

inline double ICameraInfoGE::FocusPointLatitude() const
{
    QVariant qax_result = property("FocusPointLatitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetFocusPointLatitude(double value){ setProperty("FocusPointLatitude", QVariant(value)); }

inline double ICameraInfoGE::FocusPointLongitude() const
{
    QVariant qax_result = property("FocusPointLongitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetFocusPointLongitude(double value){ setProperty("FocusPointLongitude", QVariant(value)); }

inline double ICameraInfoGE::Range() const
{
    QVariant qax_result = property("Range");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetRange(double value){ setProperty("Range", QVariant(value)); }

inline double ICameraInfoGE::Tilt() const
{
    QVariant qax_result = property("Tilt");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICameraInfoGE::SetTilt(double value){ setProperty("Tilt", QVariant(value)); }


inline double IViewExtentsGE::East() const
{
    QVariant qax_result = property("East");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IViewExtentsGE::North() const
{
    QVariant qax_result = property("North");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IViewExtentsGE::South() const
{
    QVariant qax_result = property("South");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IViewExtentsGE::West() const
{
    QVariant qax_result = property("West");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline int IFeatureGE::HasView() const
{
    QVariant qax_result = property("HasView");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IFeatureGE::Highlighted() const
{
    QVariant qax_result = property("Highlighted");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IFeatureGE::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline EARTHLib::ITimeIntervalGE* IFeatureGE::TimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("TimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}

inline int IFeatureGE::Visibility() const
{
    QVariant qax_result = property("Visibility");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IFeatureGE::SetVisibility(int value){ setProperty("Visibility", QVariant(value)); }

inline EARTHLib::IFeatureCollectionGE* IFeatureGE::GetChildren()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* IFeatureGE::GetParent()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IFeatureGE::Highlight()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline int IFeatureCollectionGE::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* IFeatureCollectionGE::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline EARTHLib::IFeatureGE* IFeatureCollectionGE::Item(int index)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline EARTHLib::ITimeGE* ITimeIntervalGE::BeginTime() const
{
    EARTHLib::ITimeGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_pointer);
    QVariant qax_result = property("BeginTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeGE**)qax_result.constData();
}

inline EARTHLib::ITimeGE* ITimeIntervalGE::EndTime() const
{
    EARTHLib::ITimeGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_pointer);
    QVariant qax_result = property("EndTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeGE**)qax_result.constData();
}


inline int ITimeGE::Day() const
{
    QVariant qax_result = property("Day");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetDay(int value){ setProperty("Day", QVariant(value)); }

inline int ITimeGE::Hour() const
{
    QVariant qax_result = property("Hour");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetHour(int value){ setProperty("Hour", QVariant(value)); }

inline int ITimeGE::Minute() const
{
    QVariant qax_result = property("Minute");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetMinute(int value){ setProperty("Minute", QVariant(value)); }

inline int ITimeGE::Month() const
{
    QVariant qax_result = property("Month");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetMonth(int value){ setProperty("Month", QVariant(value)); }

inline int ITimeGE::Second() const
{
    QVariant qax_result = property("Second");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetSecond(int value){ setProperty("Second", QVariant(value)); }

inline double ITimeGE::TimeZone() const
{
    QVariant qax_result = property("TimeZone");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITimeGE::SetTimeZone(double value){ setProperty("TimeZone", QVariant(value)); }

inline EARTHLib::__MIDL_ITimeGE_0002 ITimeGE::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL_ITimeGE_0002*)qax_result.constData();
}
inline void ITimeGE::SetType(EARTHLib::__MIDL_ITimeGE_0002 value){ setProperty("Type", QVariant(value)); }

inline int ITimeGE::Year() const
{
    QVariant qax_result = property("Year");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITimeGE::SetYear(int value){ setProperty("Year", QVariant(value)); }

inline EARTHLib::ITimeGE* ITimeGE::Clone()
{
    EARTHLib::ITimeGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::ITimeGE* ITimeGE::ConvertToZone(double TimeZone)
{
    EARTHLib::ITimeGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&TimeZone};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline double IPointOnTerrainGE::Altitude() const
{
    QVariant qax_result = property("Altitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IPointOnTerrainGE::Latitude() const
{
    QVariant qax_result = property("Latitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IPointOnTerrainGE::Longitude() const
{
    QVariant qax_result = property("Longitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int IPointOnTerrainGE::ProjectedOntoGlobe() const
{
    QVariant qax_result = property("ProjectedOntoGlobe");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IPointOnTerrainGE::ZeroElevationExaggeration() const
{
    QVariant qax_result = property("ZeroElevationExaggeration");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline int ITourControllerGE::Cycles() const
{
    QVariant qax_result = property("Cycles");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITourControllerGE::SetCycles(int value){ setProperty("Cycles", QVariant(value)); }

inline double ITourControllerGE::PauseDelay() const
{
    QVariant qax_result = property("PauseDelay");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITourControllerGE::SetPauseDelay(double value){ setProperty("PauseDelay", QVariant(value)); }

inline double ITourControllerGE::speed() const
{
    QVariant qax_result = property("speed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITourControllerGE::setSpeed(double value){ setProperty("speed", QVariant(value)); }

inline void ITourControllerGE::PlayOrPause()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ITourControllerGE::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline void ISearchControllerGE::ClearResults()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline EARTHLib::IFeatureCollectionGE* ISearchControllerGE::GetResults()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int ISearchControllerGE::IsSearchInProgress()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void ISearchControllerGE::Search(const QString& searchString)
{
    void *_a[] = {0, (void*)&searchString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline EARTHLib::ITimeIntervalGE* IAnimationControllerGE::CurrentTimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("CurrentTimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}
inline void IAnimationControllerGE::SetCurrentTimeInterval(EARTHLib::ITimeIntervalGE* value){
    int typeId = qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("EARTHLib::ITimeIntervalGE*", &value);
    setProperty("CurrentTimeInterval", QVariant(typeId, &value));
}

inline EARTHLib::ITimeIntervalGE* IAnimationControllerGE::SliderTimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("SliderTimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}

inline void IAnimationControllerGE::Pause()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IAnimationControllerGE::Play()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline int TimeGE::Day() const
{
    QVariant qax_result = property("Day");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetDay(int value){ setProperty("Day", QVariant(value)); }

inline int TimeGE::Hour() const
{
    QVariant qax_result = property("Hour");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetHour(int value){ setProperty("Hour", QVariant(value)); }

inline int TimeGE::Minute() const
{
    QVariant qax_result = property("Minute");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetMinute(int value){ setProperty("Minute", QVariant(value)); }

inline int TimeGE::Month() const
{
    QVariant qax_result = property("Month");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetMonth(int value){ setProperty("Month", QVariant(value)); }

inline int TimeGE::Second() const
{
    QVariant qax_result = property("Second");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetSecond(int value){ setProperty("Second", QVariant(value)); }

inline double TimeGE::TimeZone() const
{
    QVariant qax_result = property("TimeZone");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TimeGE::SetTimeZone(double value){ setProperty("TimeZone", QVariant(value)); }

inline EARTHLib::__MIDL_ITimeGE_0002 TimeGE::Type() const
{
    QVariant qax_result = property("Type");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL_ITimeGE_0002*)qax_result.constData();
}
inline void TimeGE::SetType(EARTHLib::__MIDL_ITimeGE_0002 value){ setProperty("Type", QVariant(value)); }

inline int TimeGE::Year() const
{
    QVariant qax_result = property("Year");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeGE::SetYear(int value){ setProperty("Year", QVariant(value)); }

inline EARTHLib::ITimeGE* TimeGE::Clone()
{
    EARTHLib::ITimeGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::ITimeGE* TimeGE::ConvertToZone(double TimeZone)
{
    EARTHLib::ITimeGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_result);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&TimeZone};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline EARTHLib::ITimeGE* TimeIntervalGE::BeginTime() const
{
    EARTHLib::ITimeGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_pointer);
    QVariant qax_result = property("BeginTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeGE**)qax_result.constData();
}

inline EARTHLib::ITimeGE* TimeIntervalGE::EndTime() const
{
    EARTHLib::ITimeGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeGE*>("ITimeGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeGE>("ITimeGE", qax_pointer);
    QVariant qax_result = property("EndTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeGE**)qax_result.constData();
}


inline double CameraInfoGE::Azimuth() const
{
    QVariant qax_result = property("Azimuth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetAzimuth(double value){ setProperty("Azimuth", QVariant(value)); }

inline double CameraInfoGE::FocusPointAltitude() const
{
    QVariant qax_result = property("FocusPointAltitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetFocusPointAltitude(double value){ setProperty("FocusPointAltitude", QVariant(value)); }

inline EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 CameraInfoGE::FocusPointAltitudeMode() const
{
    QVariant qax_result = property("FocusPointAltitudeMode");
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001*)qax_result.constData();
}
inline void CameraInfoGE::SetFocusPointAltitudeMode(EARTHLib::__MIDL___MIDL_itf_earthcom_0000_0000_0001 value){ setProperty("FocusPointAltitudeMode", QVariant(value)); }

inline double CameraInfoGE::FocusPointLatitude() const
{
    QVariant qax_result = property("FocusPointLatitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetFocusPointLatitude(double value){ setProperty("FocusPointLatitude", QVariant(value)); }

inline double CameraInfoGE::FocusPointLongitude() const
{
    QVariant qax_result = property("FocusPointLongitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetFocusPointLongitude(double value){ setProperty("FocusPointLongitude", QVariant(value)); }

inline double CameraInfoGE::Range() const
{
    QVariant qax_result = property("Range");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetRange(double value){ setProperty("Range", QVariant(value)); }

inline double CameraInfoGE::Tilt() const
{
    QVariant qax_result = property("Tilt");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CameraInfoGE::SetTilt(double value){ setProperty("Tilt", QVariant(value)); }


inline double ViewExtentsGE::East() const
{
    QVariant qax_result = property("East");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double ViewExtentsGE::North() const
{
    QVariant qax_result = property("North");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double ViewExtentsGE::South() const
{
    QVariant qax_result = property("South");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double ViewExtentsGE::West() const
{
    QVariant qax_result = property("West");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline int TourControllerGE::Cycles() const
{
    QVariant qax_result = property("Cycles");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TourControllerGE::SetCycles(int value){ setProperty("Cycles", QVariant(value)); }

inline double TourControllerGE::PauseDelay() const
{
    QVariant qax_result = property("PauseDelay");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TourControllerGE::SetPauseDelay(double value){ setProperty("PauseDelay", QVariant(value)); }

inline double TourControllerGE::speed() const
{
    QVariant qax_result = property("speed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TourControllerGE::setSpeed(double value){ setProperty("speed", QVariant(value)); }

inline void TourControllerGE::PlayOrPause()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void TourControllerGE::Stop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline void SearchControllerGE::ClearResults()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline EARTHLib::IFeatureCollectionGE* SearchControllerGE::GetResults()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int SearchControllerGE::IsSearchInProgress()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void SearchControllerGE::Search(const QString& searchString)
{
    void *_a[] = {0, (void*)&searchString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline EARTHLib::ITimeIntervalGE* AnimationControllerGE::CurrentTimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("CurrentTimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}
inline void AnimationControllerGE::SetCurrentTimeInterval(EARTHLib::ITimeIntervalGE* value){
    int typeId = qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("EARTHLib::ITimeIntervalGE*", &value);
    setProperty("CurrentTimeInterval", QVariant(typeId, &value));
}

inline EARTHLib::ITimeIntervalGE* AnimationControllerGE::SliderTimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("SliderTimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}

inline void AnimationControllerGE::Pause()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void AnimationControllerGE::Play()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline int FeatureGE::HasView() const
{
    QVariant qax_result = property("HasView");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int FeatureGE::Highlighted() const
{
    QVariant qax_result = property("Highlighted");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString FeatureGE::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline EARTHLib::ITimeIntervalGE* FeatureGE::TimeInterval() const
{
    EARTHLib::ITimeIntervalGE* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::ITimeIntervalGE*>("ITimeIntervalGE*", &qax_pointer);
    qRegisterMetaType<EARTHLib::ITimeIntervalGE>("ITimeIntervalGE", qax_pointer);
    QVariant qax_result = property("TimeInterval");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::ITimeIntervalGE**)qax_result.constData();
}

inline int FeatureGE::Visibility() const
{
    QVariant qax_result = property("Visibility");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void FeatureGE::SetVisibility(int value){ setProperty("Visibility", QVariant(value)); }

inline EARTHLib::IFeatureCollectionGE* FeatureGE::GetChildren()
{
    EARTHLib::IFeatureCollectionGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE*>("IFeatureCollectionGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureCollectionGE>("IFeatureCollectionGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline EARTHLib::IFeatureGE* FeatureGE::GetParent()
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void FeatureGE::Highlight()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline int FeatureCollectionGE::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline IUnknown* FeatureCollectionGE::_NewEnum() const
{
    QVariant qax_result = property("_NewEnum");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}

inline EARTHLib::IFeatureGE* FeatureCollectionGE::Item(int index)
{
    EARTHLib::IFeatureGE* qax_result = 0;
    qRegisterMetaType<EARTHLib::IFeatureGE*>("IFeatureGE*", &qax_result);
    qRegisterMetaType<EARTHLib::IFeatureGE>("IFeatureGE", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline double PointOnTerrainGE::Altitude() const
{
    QVariant qax_result = property("Altitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double PointOnTerrainGE::Latitude() const
{
    QVariant qax_result = property("Latitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double PointOnTerrainGE::Longitude() const
{
    QVariant qax_result = property("Longitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline int PointOnTerrainGE::ProjectedOntoGlobe() const
{
    QVariant qax_result = property("ProjectedOntoGlobe");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int PointOnTerrainGE::ZeroElevationExaggeration() const
{
    QVariant qax_result = property("ZeroElevationExaggeration");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline double KHInterface::AutoPilotSpeed() const
{
    QVariant qax_result = property("AutoPilotSpeed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHInterface::SetAutoPilotSpeed(double value){ setProperty("AutoPilotSpeed", QVariant(value)); }

inline int KHInterface::StreamingProgressPercentage() const
{
    QVariant qax_result = property("StreamingProgressPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::IKHViewExtents* KHInterface::currentViewExtents() const
{
    EARTHLib::IKHViewExtents* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IKHViewExtents*>("IKHViewExtents*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IKHViewExtents>("IKHViewExtents", qax_pointer);
    QVariant qax_result = property("currentViewExtents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IKHViewExtents**)qax_result.constData();
}

inline EARTHLib::IKHFeature* KHInterface::GetFeatureByName(const QString& Name)
{
    EARTHLib::IKHFeature* qax_result = 0;
    qRegisterMetaType<EARTHLib::IKHFeature*>("IKHFeature*", &qax_result);
    qRegisterMetaType<EARTHLib::IKHFeature>("IKHFeature", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariantList KHInterface::GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&screen_x, (void*)&screen_y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void KHInterface::LoadKml(QString& kmlData)
{
    void *_a[] = {0, (void*)&kmlData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void KHInterface::OpenFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void KHInterface::QuitApplication()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void KHInterface::SaveScreenShot(const QString& fileName, int quality)
{
    void *_a[] = {0, (void*)&fileName, (void*)&quality};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void KHInterface::SetFeatureView(EARTHLib::IKHFeature* feature, double speed)
{
    void *_a[] = {0, (void*)&feature, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void KHInterface::SetRenderWindowSize(int width, int height)
{
    void *_a[] = {0, (void*)&width, (void*)&height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline EARTHLib::IKHViewInfo* KHInterface::currentView(int terrain)
{
    EARTHLib::IKHViewInfo* qax_result = 0;
    qRegisterMetaType<EARTHLib::IKHViewInfo*>("IKHViewInfo*", &qax_result);
    qRegisterMetaType<EARTHLib::IKHViewInfo>("IKHViewInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&terrain};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void KHInterface::getCurrentVersion(int& major, int& minor, int& build, __MIDL_IKHInterface_0001& appType)
{
    void *_a[] = {0, (void*)&major, (void*)&minor, (void*)&build, (void*)&appType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void KHInterface::isClientInitialized(int& IsInitialized)
{
    void *_a[] = {0, (void*)&IsInitialized};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void KHInterface::setView(EARTHLib::IKHViewInfo* view, int terrain, double speed)
{
    void *_a[] = {0, (void*)&view, (void*)&terrain, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void KHInterface::setViewParams(double lat, double lon, double Range, double Tilt, double Azimuth, int terrain, double speed)
{
    void *_a[] = {0, (void*)&lat, (void*)&lon, (void*)&Range, (void*)&Tilt, (void*)&Azimuth, (void*)&terrain, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline double IKHInterface::AutoPilotSpeed() const
{
    QVariant qax_result = property("AutoPilotSpeed");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHInterface::SetAutoPilotSpeed(double value){ setProperty("AutoPilotSpeed", QVariant(value)); }

inline int IKHInterface::StreamingProgressPercentage() const
{
    QVariant qax_result = property("StreamingProgressPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline EARTHLib::IKHViewExtents* IKHInterface::currentViewExtents() const
{
    EARTHLib::IKHViewExtents* qax_pointer = 0;
    qRegisterMetaType<EARTHLib::IKHViewExtents*>("IKHViewExtents*", &qax_pointer);
    qRegisterMetaType<EARTHLib::IKHViewExtents>("IKHViewExtents", qax_pointer);
    QVariant qax_result = property("currentViewExtents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(EARTHLib::IKHViewExtents**)qax_result.constData();
}

inline EARTHLib::IKHFeature* IKHInterface::GetFeatureByName(const QString& Name)
{
    EARTHLib::IKHFeature* qax_result = 0;
    qRegisterMetaType<EARTHLib::IKHFeature*>("IKHFeature*", &qax_result);
    qRegisterMetaType<EARTHLib::IKHFeature>("IKHFeature", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariantList IKHInterface::GetPointOnTerrainFromScreenCoords(double screen_x, double screen_y)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&screen_x, (void*)&screen_y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IKHInterface::LoadKml(QString& kmlData)
{
    void *_a[] = {0, (void*)&kmlData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IKHInterface::OpenFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IKHInterface::QuitApplication()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IKHInterface::SaveScreenShot(const QString& fileName, int quality)
{
    void *_a[] = {0, (void*)&fileName, (void*)&quality};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IKHInterface::SetFeatureView(EARTHLib::IKHFeature* feature, double speed)
{
    void *_a[] = {0, (void*)&feature, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IKHInterface::SetRenderWindowSize(int width, int height)
{
    void *_a[] = {0, (void*)&width, (void*)&height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline EARTHLib::IKHViewInfo* IKHInterface::currentView(int terrain)
{
    EARTHLib::IKHViewInfo* qax_result = 0;
    qRegisterMetaType<EARTHLib::IKHViewInfo*>("IKHViewInfo*", &qax_result);
    qRegisterMetaType<EARTHLib::IKHViewInfo>("IKHViewInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&terrain};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IKHInterface::getCurrentVersion(int& major, int& minor, int& build, __MIDL_IKHInterface_0001& appType)
{
    void *_a[] = {0, (void*)&major, (void*)&minor, (void*)&build, (void*)&appType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IKHInterface::isClientInitialized(int& IsInitialized)
{
    void *_a[] = {0, (void*)&IsInitialized};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IKHInterface::setView(EARTHLib::IKHViewInfo* view, int terrain, double speed)
{
    void *_a[] = {0, (void*)&view, (void*)&terrain, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IKHInterface::setViewParams(double lat, double lon, double Range, double Tilt, double Azimuth, int terrain, double speed)
{
    void *_a[] = {0, (void*)&lat, (void*)&lon, (void*)&Range, (void*)&Tilt, (void*)&Azimuth, (void*)&terrain, (void*)&speed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline double IKHViewInfo::Azimuth() const
{
    QVariant qax_result = property("Azimuth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHViewInfo::SetAzimuth(double value){ setProperty("Azimuth", QVariant(value)); }

inline double IKHViewInfo::Latitude() const
{
    QVariant qax_result = property("Latitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHViewInfo::SetLatitude(double value){ setProperty("Latitude", QVariant(value)); }

inline double IKHViewInfo::Longitude() const
{
    QVariant qax_result = property("Longitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHViewInfo::SetLongitude(double value){ setProperty("Longitude", QVariant(value)); }

inline double IKHViewInfo::Range() const
{
    QVariant qax_result = property("Range");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHViewInfo::SetRange(double value){ setProperty("Range", QVariant(value)); }

inline double IKHViewInfo::Tilt() const
{
    QVariant qax_result = property("Tilt");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IKHViewInfo::SetTilt(double value){ setProperty("Tilt", QVariant(value)); }


inline double IKHViewExtents::East() const
{
    QVariant qax_result = property("East");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IKHViewExtents::North() const
{
    QVariant qax_result = property("North");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IKHViewExtents::South() const
{
    QVariant qax_result = property("South");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IKHViewExtents::West() const
{
    QVariant qax_result = property("West");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline int IKHFeature::HasView() const
{
    QVariant qax_result = property("HasView");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IKHFeature::Visibility() const
{
    QVariant qax_result = property("Visibility");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IKHFeature::SetVisibility(int value){ setProperty("Visibility", QVariant(value)); }


inline double KHViewInfo::Azimuth() const
{
    QVariant qax_result = property("Azimuth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHViewInfo::SetAzimuth(double value){ setProperty("Azimuth", QVariant(value)); }

inline double KHViewInfo::Latitude() const
{
    QVariant qax_result = property("Latitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHViewInfo::SetLatitude(double value){ setProperty("Latitude", QVariant(value)); }

inline double KHViewInfo::Longitude() const
{
    QVariant qax_result = property("Longitude");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHViewInfo::SetLongitude(double value){ setProperty("Longitude", QVariant(value)); }

inline double KHViewInfo::Range() const
{
    QVariant qax_result = property("Range");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHViewInfo::SetRange(double value){ setProperty("Range", QVariant(value)); }

inline double KHViewInfo::Tilt() const
{
    QVariant qax_result = property("Tilt");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void KHViewInfo::SetTilt(double value){ setProperty("Tilt", QVariant(value)); }


inline double KHViewExtents::East() const
{
    QVariant qax_result = property("East");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double KHViewExtents::North() const
{
    QVariant qax_result = property("North");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double KHViewExtents::South() const
{
    QVariant qax_result = property("South");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double KHViewExtents::West() const
{
    QVariant qax_result = property("West");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline int KHFeature::HasView() const
{
    QVariant qax_result = property("HasView");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int KHFeature::Visibility() const
{
    QVariant qax_result = property("Visibility");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void KHFeature::SetVisibility(int value){ setProperty("Visibility", QVariant(value)); }



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<EARTHLib::ApplicationGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ApplicationGE*>(t)->EARTHLib::ApplicationGE::~ApplicationGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ApplicationGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ApplicationGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ApplicationGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IApplicationGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IApplicationGE*>(t)->EARTHLib::IApplicationGE::~IApplicationGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IApplicationGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IApplicationGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IApplicationGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ICameraInfoGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ICameraInfoGE*>(t)->EARTHLib::ICameraInfoGE::~ICameraInfoGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ICameraInfoGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ICameraInfoGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ICameraInfoGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IViewExtentsGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IViewExtentsGE*>(t)->EARTHLib::IViewExtentsGE::~IViewExtentsGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IViewExtentsGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IViewExtentsGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IViewExtentsGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IFeatureGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IFeatureGE*>(t)->EARTHLib::IFeatureGE::~IFeatureGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IFeatureGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IFeatureGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IFeatureGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IFeatureCollectionGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IFeatureCollectionGE*>(t)->EARTHLib::IFeatureCollectionGE::~IFeatureCollectionGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IFeatureCollectionGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IFeatureCollectionGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IFeatureCollectionGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ITimeIntervalGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ITimeIntervalGE*>(t)->EARTHLib::ITimeIntervalGE::~ITimeIntervalGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ITimeIntervalGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ITimeIntervalGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ITimeIntervalGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ITimeGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ITimeGE*>(t)->EARTHLib::ITimeGE::~ITimeGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ITimeGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ITimeGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ITimeGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IPointOnTerrainGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IPointOnTerrainGE*>(t)->EARTHLib::IPointOnTerrainGE::~IPointOnTerrainGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IPointOnTerrainGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IPointOnTerrainGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IPointOnTerrainGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ITourControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ITourControllerGE*>(t)->EARTHLib::ITourControllerGE::~ITourControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ITourControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ITourControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ITourControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ISearchControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ISearchControllerGE*>(t)->EARTHLib::ISearchControllerGE::~ISearchControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ISearchControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ISearchControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ISearchControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IAnimationControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IAnimationControllerGE*>(t)->EARTHLib::IAnimationControllerGE::~IAnimationControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IAnimationControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IAnimationControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IAnimationControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::TimeGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::TimeGE*>(t)->EARTHLib::TimeGE::~TimeGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::TimeGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::TimeGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::TimeGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::TimeIntervalGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::TimeIntervalGE*>(t)->EARTHLib::TimeIntervalGE::~TimeIntervalGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::TimeIntervalGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::TimeIntervalGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::TimeIntervalGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::CameraInfoGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::CameraInfoGE*>(t)->EARTHLib::CameraInfoGE::~CameraInfoGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::CameraInfoGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::CameraInfoGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::CameraInfoGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::ViewExtentsGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::ViewExtentsGE*>(t)->EARTHLib::ViewExtentsGE::~ViewExtentsGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::ViewExtentsGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::ViewExtentsGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::ViewExtentsGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::TourControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::TourControllerGE*>(t)->EARTHLib::TourControllerGE::~TourControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::TourControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::TourControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::TourControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::SearchControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::SearchControllerGE*>(t)->EARTHLib::SearchControllerGE::~SearchControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::SearchControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::SearchControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::SearchControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::AnimationControllerGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::AnimationControllerGE*>(t)->EARTHLib::AnimationControllerGE::~AnimationControllerGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::AnimationControllerGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::AnimationControllerGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::AnimationControllerGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::FeatureGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::FeatureGE*>(t)->EARTHLib::FeatureGE::~FeatureGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::FeatureGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::FeatureGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::FeatureGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::FeatureCollectionGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::FeatureCollectionGE*>(t)->EARTHLib::FeatureCollectionGE::~FeatureCollectionGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::FeatureCollectionGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::FeatureCollectionGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::FeatureCollectionGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::PointOnTerrainGE, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::PointOnTerrainGE*>(t)->EARTHLib::PointOnTerrainGE::~PointOnTerrainGE();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::PointOnTerrainGE;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::PointOnTerrainGE*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::PointOnTerrainGE*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::KHInterface, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::KHInterface*>(t)->EARTHLib::KHInterface::~KHInterface();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::KHInterface;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::KHInterface*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::KHInterface*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IKHInterface, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IKHInterface*>(t)->EARTHLib::IKHInterface::~IKHInterface();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IKHInterface;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IKHInterface*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IKHInterface*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IKHViewInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IKHViewInfo*>(t)->EARTHLib::IKHViewInfo::~IKHViewInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IKHViewInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IKHViewInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IKHViewInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IKHViewExtents, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IKHViewExtents*>(t)->EARTHLib::IKHViewExtents::~IKHViewExtents();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IKHViewExtents;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IKHViewExtents*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IKHViewExtents*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::IKHFeature, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::IKHFeature*>(t)->EARTHLib::IKHFeature::~IKHFeature();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::IKHFeature;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::IKHFeature*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::IKHFeature*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::KHViewInfo, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::KHViewInfo*>(t)->EARTHLib::KHViewInfo::~KHViewInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::KHViewInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::KHViewInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::KHViewInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::KHViewExtents, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::KHViewExtents*>(t)->EARTHLib::KHViewExtents::~KHViewExtents();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::KHViewExtents;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::KHViewExtents*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::KHViewExtents*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<EARTHLib::KHFeature, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<EARTHLib::KHFeature*>(t)->EARTHLib::KHFeature::~KHFeature();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) EARTHLib::KHFeature;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const EARTHLib::KHFeature*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<EARTHLib::KHFeature*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

